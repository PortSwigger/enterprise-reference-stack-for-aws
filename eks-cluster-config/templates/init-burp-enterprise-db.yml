apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.applicationName }}-psql-init
  labels:
    app.kubernetes.io/name: {{ .Values.applicationName }}-psql-init
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: {{ .Values.applicationName }}
spec:
  completions: 1
  parallelism: 1
  template:
    spec:
      containers:
        - name: psql-init
          image: postgres:16
          env:
            - name: POSTGRES_USER
              value: {{ .Values.database.postgresUser }}
            - name: PGPASSWORD
              value: {{ .Values.database.postgresPassword }}
          command:
           - sh
           - -c
           - |
             echo "Initialising database..."
             echo "SELECT 'CREATE USER {{ .Values.database.enterpriseServerUsername }} PASSWORD ''{{ .Values.database.enterpriseServerPassword }}''' WHERE NOT EXISTS (SELECT FROM pg_user WHERE usename = '{{ .Values.database.enterpriseServerUsername }}')\gexec" | psql -h {{ .Values.database.host }} -p {{ .Values.database.port }} -U $POSTGRES_USER -d postgres
             echo "SELECT 'CREATE USER {{ .Values.database.scanningResourceUsername }} PASSWORD ''{{ .Values.database.scanningResourcePassword }}''' WHERE NOT EXISTS (SELECT FROM pg_user WHERE usename = '{{ .Values.database.scanningResourceUsername }}')\gexec" | psql -h {{ .Values.database.host }} -p {{ .Values.database.port }} -U $POSTGRES_USER -d postgres
             echo "SELECT 'CREATE DATABASE {{ .Values.database.name }}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{ .Values.database.name }}')\gexec" | psql -h {{ .Values.database.host }} -p {{ .Values.database.port }} -U $POSTGRES_USER -d postgres
             echo "GRANT ALL ON DATABASE {{ .Values.database.name }} TO {{ .Values.database.enterpriseServerUsername }}" | psql -h {{ .Values.database.host }} -p {{ .Values.database.port }} -U $POSTGRES_USER -d postgres
             echo "GRANT ALL ON SCHEMA public TO {{ .Values.database.enterpriseServerUsername }}" | psql -h {{ .Values.database.host }} -p {{ .Values.database.port }} -U $POSTGRES_USER -d {{ .Values.database.name }}
             echo "...database initialised"
      restartPolicy: OnFailure
